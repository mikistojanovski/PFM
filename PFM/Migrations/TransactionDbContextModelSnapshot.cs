// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PFM.Database.Repositories;

#nullable disable

namespace PFM.Migrations
{
    [DbContext(typeof(TransactionDbContext))]
    partial class TransactionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PFM.Database.Entities.CategoryEntity", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("parentcode")
                        .HasColumnType("text");

                    b.HasKey("code");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("PFM.Database.Entities.SplitsEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("categorycode")
                        .HasColumnType("text");

                    b.Property<int>("transactionid")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("categorycode");

                    b.HasIndex("transactionid");

                    b.ToTable("Splits");
                });

            modelBuilder.Entity("PFM.Database.Entities.SubCategoryEntity", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("CategoryEntitycode")
                        .HasColumnType("text");

                    b.Property<int?>("TransactionEntityid")
                        .HasColumnType("integer");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("parentcode")
                        .HasColumnType("text");

                    b.HasKey("code");

                    b.HasIndex("CategoryEntitycode");

                    b.HasIndex("TransactionEntityid");

                    b.HasIndex("TransactionId");

                    b.HasIndex("parentcode");

                    b.ToTable("SubCategories", (string)null);
                });

            modelBuilder.Entity("PFM.Database.Entities.TransactionEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<double>("amount")
                        .HasColumnType("double precision");

                    b.Property<string>("beneficiaryname")
                        .HasColumnType("text");

                    b.Property<string>("currency")
                        .HasColumnType("text");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("direction")
                        .HasColumnType("text");

                    b.Property<string>("kind")
                        .HasColumnType("text");

                    b.Property<int?>("mcc")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("PFM.Models.Category", b =>
                {
                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("parentcode")
                        .HasColumnType("text");

                    b.HasKey("code");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("PFM.Models.SubCategory", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentCode")
                        .HasColumnType("text");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("integer");

                    b.HasKey("Code");

                    b.HasIndex("ParentCode");

                    b.HasIndex("TransactionId");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("PFM.Models.Transaction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<double>("amount")
                        .HasColumnType("double precision");

                    b.Property<string>("beneficiaryname")
                        .HasColumnType("text");

                    b.Property<string>("currency")
                        .HasColumnType("text");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("direction")
                        .HasColumnType("text");

                    b.Property<string>("kind")
                        .HasColumnType("text");

                    b.Property<int?>("mcc")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("PFM.Database.Entities.SplitsEntity", b =>
                {
                    b.HasOne("PFM.Database.Entities.CategoryEntity", "CategoryEntity")
                        .WithMany()
                        .HasForeignKey("categorycode");

                    b.HasOne("PFM.Database.Entities.TransactionEntity", "TransactionEntity")
                        .WithMany()
                        .HasForeignKey("transactionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryEntity");

                    b.Navigation("TransactionEntity");
                });

            modelBuilder.Entity("PFM.Database.Entities.SubCategoryEntity", b =>
                {
                    b.HasOne("PFM.Database.Entities.CategoryEntity", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryEntitycode");

                    b.HasOne("PFM.Database.Entities.TransactionEntity", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("TransactionEntityid");

                    b.HasOne("PFM.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId");

                    b.HasOne("PFM.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("parentcode");

                    b.Navigation("Category");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PFM.Models.SubCategory", b =>
                {
                    b.HasOne("PFM.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCode");

                    b.HasOne("PFM.Models.Transaction", "Transaction")
                        .WithMany("SubCategories")
                        .HasForeignKey("TransactionId");

                    b.Navigation("Category");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PFM.Database.Entities.CategoryEntity", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("PFM.Database.Entities.TransactionEntity", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("PFM.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("PFM.Models.Transaction", b =>
                {
                    b.Navigation("SubCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
